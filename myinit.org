#+STARTIP: overview

* Link
** Github
   [[https://github.com/SungmanYou/emacs]]


* Notes
** Loading other files
   #+BEGIN_SRC emacs-lisp
(defun load-if-exists-and-readable (f)
  "Load the elisp file only if it exists & readable"
  "(load-if-exists-and-readable 'some/path/to/load/the/file/foo.el')"
  (if (file-readable-p f)
	(load-file f)
  )
)
   #+END_SRC
** Flycheck: eslint Google Config (.eslintrc.js)
   #+BEGIN_QUOTE
   Require "npm install eslint eslint-config-google eslint-plugin-json -g"

   Save the below as ".eslintrc.js" to the root directory of project
   #+END_QUOTE
   #+BEGIN_SRC javascript
  module.exports = {
      "extends": "google",
      "env": {
	  "browser": true,
	  "es6": true,
	  "node": true
      },
      "plugins": [
	  "json"
      ],
      "rules": {
	  "no-tabs": 0,
	  "comma-dangle": 0,
	  "no-mixed-spaces-and-tabs": 0,
	  "no-trailing-spaces": 0,
	  "max-len": 0,
	  "new-cap": 0,
	  "require-jsdoc": ["error", {
	      "require": {
		  "FunctionDeclaration": false, // true
		  "MethodDefinition": false,
		  "ClassDeclaration": false,
		  "ArrowFunctionExpression": false
	      }
	  }]
      }
  };
   #+END_SRC

** Flycheck: Angular CLI (tslint.json)
   #+BEGIN_QUOTE
   Require "npm install typescript tslint -g"
   #+END_QUOTE
   #+BEGIN_SRC javascript
     "indent": [
	 false, // true
	 "spaces"
     ],
     "no-trailing-whitespace": false, // true
   #+END_SRC


* Theme
** Atom One Dark
   #+BEGIN_SRC emacs-lisp
(use-package atom-one-dark-theme
  :ensure t
)
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/atom-one-dark-theme-20170803.916/")
;; (load-theme 'atom-one-dark t)
   #+END_SRC
** Zenburn
   #+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
)
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/zenburn-theme-20170511.1337/")
(load-theme 'zenburn t)
   #+END_SRC
   

* Interface tweaks
** Disable the Welcome page
   #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
   #+END_SRC
** Hide the top tool bar
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
   #+END_SRC
** Full screen on startup
   #+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
   #+END_SRC
** Enable line number & Fix linum for scaled text
   #+BEGIN_SRC emacs-lisp
(global-linum-mode t)

(require 'linum)
(defun linum-update-window-scale-fix (win)
  (set-window-margins win
          (ceiling (* (if (boundp 'text-scale-mode-step)
                  (expt text-scale-mode-step
                    text-scale-mode-amount) 1)
              (if (car (window-margins))
                  (car (window-margins)) 1)
              ))))
(advice-add #'linum-update-window :after #'linum-update-window-scale-fix)
   #+END_SRC
** Set default directory
   #+BEGIN_SRC emacs-lisp
  (setq default-directory "/Users/sungman.you/Desktop/coding/projects/")
   #+END_SRC
** Set ibuffer as default
   #+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
   #+END_SRC
** Set "yes or no" to "y or n"
   #+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Highlight current line
   #+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
   #+END_SRC
** <F5> key binding : Revert buffer (X)
   #+BEGIN_SRC emacs-lisp
     ;; (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
** <S-SPC> key binding : Mark set
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-SPC") (lambda() (interactive) (push-mark nil nil 1)))
   #+END_SRC
** <C-M-\> key binding : Auto indent
   #+BEGIN_SRC emacs-lisp
(defun auto-indent ()
    (save-excursion
      (indent-region (point-min) (point-max))
  )
)
(global-set-key (kbd "C-M-\\") (lambda() (interactive) (auto-indent)))
   #+END_SRC

** Enable Show paren Mode
   #+BEGIN_SRC emacs-lisp
     ;; Make it permanent
     (show-paren-mode 1)
     ;; Deactivate delay
     (setq show-paren-delay 0)
     ;; Change the color / face
     (require 'paren)
     (set-face-background 'show-paren-match "#000000")
     (set-face-foreground 'show-paren-match "#ff4040")
     (set-face-attribute 'show-paren-match nil :weight 'ultra-bold)
   #+END_SRC

** Auto enable 'Octave mode'
   #+BEGIN_SRC emacs-lisp
  ;; enable 'Octave Mode' automatically for all .m files
  (setq auto-mode-alist
	(cons '("\\.m$" . octave-mode) auto-mode-alist))

  ;; to turn on the abbrevs, auto-fill and font-lock features automatically
  (add-hook 'octave-mode-hook
	    (lambda ()
	      (abbrev-mode 1)
	      (auto-fill-mode 1)
	      (if (eq window-system 'x)
		  (font-lock-mode 1))))
   #+END_SRC


* Packages
** Try (X)
   #+BEGIN_SRC emacs-lisp
     ;; (use-package try
     ;;   :ensure t
     ;; )
   #+END_SRC
** Which key (X)
   #+BEGIN_SRC emacs-lisp
     ;; (use-package which-key
     ;;   :ensure t
     ;;   :config (which-key-mode)
     ;; )
   #+END_SRC
** Ace window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (setq aw-background nil)
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 1.5)))
	   )
	 )
       )
     )
   #+END_SRC
** Counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind (("M-y" . counsel-yank-pop)
	      :map ivy-minibuffer-map
	      ("M-y" . ivy-next-line))
     )
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (
	      ("C-s" . swiper)
	      ("C-r" . swiper)
	      ("C-c C-r" . ivy-resume)
	      ("M-x" . counsel-M-x)
	      ("C-x C-f" . counsel-find-file)
	      )
       :config (progn
		 (ivy-mode 1)
		 (setq ivy-use-virtual-buffers t)
		 (setq ivy-display-style 'fancy)
		 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
		 )
       )
   #+END_SRC
** Auto complete
   #+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init (progn
          (ac-config-default)
          (global-auto-complete-mode t)
        )
)
   #+END_SRC
** Reveal.js (X)
   #+BEGIN_SRC emacs-lisp
     ;; (use-package ox-reveal
     ;;   :ensure ox-reveal
     ;; )
     ;; (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
     ;; (setq org-reveal-mathjax t)

     ;; ;; For highlighting syntax in presentation
     ;; (use-package htmlize
     ;;   :ensure t
     ;; )
   #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init (yas-global-mode 1)
)
   #+END_SRC
** Undo tree (X)
   #+BEGIN_SRC emacs-lisp
     ;; (use-package undo-tree
     ;;   :ensure t
     ;;   :init (global-undo-tree-mode)
     ;; )
   #+END_SRC
** Aggresive indent (X)
   #+BEGIN_SRC emacs-lisp
     ;; (use-package aggresive-indent
     ;;   :ensure t
     ;;   :config (global-aggresive-indent-mode 1)
     ;; )
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
     )
     ;; Key bindings
     (global-set-key (kbd "C-x g") 'magit-status)
     (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)

     ;; Enable global magit file mode
     (global-magit-file-mode t)
   #+END_SRC
** Hungry delete
   #+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config (global-hungry-delete-mode)
)
   #+END_SRC
** Exec path from shell
   Getting environment variables
   #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
)
(exec-path-from-shell-initialize)
   #+END_SRC

** JS2 mode
   #+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
   #+END_SRC
** TypeScript mode
   #+BEGIN_SRC emacs-lisp
(use-package typescript-mode
:ensure t
)
;;(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
   #+END_SRC
** Ng2 mode
   #+BEGIN_SRC emacs-lisp
(use-package ng2-mode
:ensure t
)
(require 'ng2-mode)
(add-to-list 'auto-mode-alist '("\\.module.ts\\'" . ng2-ts-mode))
   #+END_SRC
** Shell pop (X)
   #+BEGIN_SRC emacs-lisp
     ;; (use-package shell-pop
     ;; :ensure t
     ;; )
     ;; (require 'shell-pop)
   #+END_SRC
** Smart Parens
   #+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t
:config (require 'smartparens-config)
:init (smartparens-global-mode t))
   #+END_SRC
** Nameses (X)
   #+BEGIN_SRC emacs-lisp
     ;; (load "nameses")
     ;; (require 'desktop)
     ;; (require 'nameses)
     ;; (global-set-key (kbd "<f9>")     'nameses-load)
     ;; (global-set-key (kbd "C-<f9>")   'nameses-prev)
     ;; (global-set-key (kbd "C-S-<f9>") 'nameses-save)
   #+END_SRC
** Expand-region
   C-= to expand region
   #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))
(setq shift-select-mode nil) ;; When you expand region then C-g for some reason has conflict with transient-mark-mode
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
     (add-hook 'after-init-hook #'global-flycheck-mode)
     (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
     (flycheck-add-mode 'typescript-tslint 'ng2-ts-mode)

     ;; (use-package flycheck-color-mode-line
     ;;   :ensure t)
     ;; (with-eval-after-load 'flycheck
     ;;   '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

     ;; (use-package flycheck-pos-tip
     ;;   :ensure t)
     ;; (with-eval-after-load 'flycheck
     ;;   (flycheck-pos-tip-mode))
   #+END_SRC
