#+STARTIP: overview

* Link
** Github
   [[https://github.com/SungmanYou/emacs]]


* Notes


* Interface tweaks
** Disable the Welcome page
   #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
   #+END_SRC
** Hide the top tool bar
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
   #+END_SRC
** Full screen on startup
   #+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
   #+END_SRC
** Enable line number
   #+BEGIN_SRC emacs-lisp
(global-linum-mode t)
   #+END_SRC
** Set ibuffer as default
   #+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
   #+END_SRC
** Set "yes or no" to "y or n"
   #+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Highlight current line
   #+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
   #+END_SRC
** <F5> key binding : Revert buffer
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
** <S-SPC> key binding : Mark set
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-SPC") (lambda() (interactive) (push-mark nil nil 1)))
   #+END_SRC
** <C-M-\> key binding : Auto indent
   #+BEGIN_SRC emacs-lisp
(defun auto-indent ()
    (save-excursion
      (indent-region (point-min) (point-max))
  )
)
(global-set-key (kbd "C-M-\\") (lambda() (interactive) (auto-indent)))
   #+END_SRC

** <C-x g> key binding : Magit
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
* Theme
** Atom One Dark
   #+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/atom-one-dark-theme-20170803.916/")
(load-theme 'atom-one-dark t)
   #+END_SRC


* Packages
** Try
   #+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t
)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode)
)
   #+END_SRC
** Ace window
   #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    )
)
   #+END_SRC
** Counsel
   #+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
)
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (
          ("C-s" . swiper)
          ("C-r" . swiper)
          ("C-c C-r" . ivy-resume)
	  ("M-x" . counsel-M-x)
	  ("C-x C-f" . counsel-find-file)
	)
  :config (progn
            (ivy-mode 1)
	    (setq ivy-use-virtual-buffers t)
	    (setq ivy-display-style 'fancy)
	    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  )
)
   #+END_SRC
** Auto complete
   #+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init (progn
          (ac-config-default)
          (global-auto-complete-mode t)
        )
)
   #+END_SRC
** Reveal.js
   #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal
)
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

;; For highlighting syntax in presentation
(use-package htmlize
  :ensure t
)
   #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init (yas-global-mode 1)
)
   #+END_SRC
** Undo tree
   #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode)
)
   #+END_SRC
** Aggresive indent
   #+BEGIN_SRC emacs-lisp
(use-package aggresive-indent
  :ensure t
  :config (global-aggresive-indent-mode 1)
)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
)
   #+END_SRC
